# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: '3'
 
# Define services
services:
  # App backend service
  app-server:
    #container_name: spring
    # Configuration for building the docker image for the backend service
    image: app-service
    build:
      context: spring-boot-server # Use an image built from the specified dockerfile in the `spring-boot-oauth2-social-login` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    depends_on:
      - db
      - fluentd
    logging:
      driver: 'fluentd'
      options:
        fluentd-address: localhost:24224
        tag: app
    restart: always
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/testdb?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: pfe
      SPRING_DATASOURCE_PASSWORD: pfe     
      #SPRING_DATASOURCE_ROOT_PASSWORD: pfe 
    volumes:
      - /var/lib/docker/containers:/fluentd/log/containers
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend
      - app-network

 
  # Frontend Service 
  app-client:
    #container_name: spring
    build:
      context: angular-11-client # Use an image built from the specified dockerfile in the `angular-11-social-login` directory.
      dockerfile: Dockerfile
      #args:
        #API_BASE_URL: http://127.0.0.1:8080/
    ports:
      - "8081:80" # Map the exposed port 80 on the container to port 8081 on the host machine
    restart: always
    depends_on:
      - app-server
      - fluentd
    logging:
      driver: 'fluentd'
      options:
        fluentd-address: localhost:24224
        tag: app
    networks:
      - frontend  
 
  # Database Service (Mysql)
  db:
    image: mysql
    container_name: db
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: pfe
      MYSQL_DATABASE: testdb
      MYSQL_USER: pfe
      MYSQL_PASSWORD: pfe
    volumes:
      - dockerAngularSpringDatabaseData:/var/lib/mysql
    networks:
      - backend  

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ulimits:
          memlock:
            soft: -1
            hard: -1
    ports:
      - 9200:9200
    networks:
      - elasticsearch
    expose:
      - "9200"
  kibana:
    image: docker.elastic.co/kibana/kibana:7.2.0
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - elasticsearch
    depends_on:
      - elasticsearch

  fluentd:
    build: ./fluentd
    volumes:
      - /var/lib/docker/containers:/fluentd/log/containers
      - ./fluentd/conf:/fluentd/etc
      - ./logs:/output/
    logging:
      driver: "local"
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - app-network
      - elasticsearch
    depends_on:
      - elasticsearch
   
# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:
  app-network:
    driver: bridge
  elasticsearch:
    driver: bridge
      
volumes:
  dockerAngularSpringDatabaseData:
  esdata:
    driver: local

